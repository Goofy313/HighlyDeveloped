@inherits Umbraco.Web.Mvc.UmbracoViewPage<HighlyDeveloped.Core.ViewModel.AccountViewModel>
@using HighlyDeveloped.Core.Controllers
@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}
<div class="container">
    <div class="row">
        <div class="col">
            <h2>My Account</h2>
            <!-- If this is a postback - success show a message -->
            @if (TempData["status"] != null)
            {
                if ((string)TempData["status"] == "Updated Details")
                {
                    <p>Your details have been updated.</p>
                }
                else
                {
                    <p>Thanks for changing your password.</p>
                }
            }
            else
            {
                // Summarize the error messages from all validators
                @Html.ValidationSummary()
                <!-- Otherwise show the form -->
                using (Html.BeginUmbracoForm<AccountController>("HandleUpdateDetails"))
                {
                    <h2 class="h3">Fill in the details below to register:</h2>
                    @Html.AntiForgeryToken()

                    <div>
                        @Html.LabelFor(m => m.Name)
                        @Html.TextAreaFor(m => m.Name, new { @class = "form-control", @type = "text" })
                        @Html.ValidationMessageFor(m => m.Name)
                    </div>

                    <div>
                        @Html.LabelFor(m => m.Email)
                        @Html.TextAreaFor(m => m.Email, new { @class = "form-control", @type = "text" })
                        @Html.ValidationMessageFor(m => m.Email)
                    </div>

                    <button type="submit" value="Update Details" name="update-button">Update</button>
                }

                //Password changed form
                using (Html.BeginUmbracoForm<AccountController>("HandlePasswordChange"))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.Name)
                    @Html.HiddenFor(m => m.Email)
                    @Html.HiddenFor(m => m.Username)

                    <div class="form-group">
                        @Html.LabelFor(m => m.Password)
                        @Html.PasswordFor(m => m.Password, new { @class = "form-control", @type = "password", @autocomplete = "off" })
                        @Html.ValidationMessageFor(m => m.Password)
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.ConfirmPassword)
                        @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", @type = "password", @autocomplete = "off" })
                        @Html.ValidationMessageFor(m => m.ConfirmPassword)
                    </div>

                    <button type="submit" value="Change Password" name="password-button">Change Password</button>
                }
            }
        </div>
    </div>
</div>

